{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nexport const useChangePassword = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isChanged, setIsChanged] = useState(false);\n  const changepassword = async (oldpassword, newpassword, confirmed_newpassword) => {\n    setIsLoading(true);\n    setIsChanged(false);\n    setError(null);\n    try {\n      const response = await fetch(\"http://localhost:4000/changepassword\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          oldpassword,\n          newpassword,\n          confirmed_newpassword\n        })\n      });\n      const json = await response.json();\n      if (!response.ok) {\n        setIsLoading(false);\n        setError(json.error);\n      }\n      if (response.ok) {\n        setIsLoading(false);\n        alert(json.message + \"!\");\n        setIsChanged(true);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return {\n    changepassword,\n    isLoading,\n    error,\n    isChanged\n  };\n};\n_s(useChangePassword, \"YyOnf+oHcqRgkCgR0M6qu4VWsgo=\");","map":{"version":3,"names":["useState","useChangePassword","_s","error","setError","isLoading","setIsLoading","isChanged","setIsChanged","changepassword","oldpassword","newpassword","confirmed_newpassword","response","fetch","method","headers","credentials","body","JSON","stringify","json","ok","alert","message","console","log"],"sources":["/Users/samirwankhede/Coding Stuff/Brainop Technology internship interview project/frontend/src/hooks/useChangePassword.tsx"],"sourcesContent":["import {useState} from \"react\"\n\nexport const useChangePassword = () => {\n    const [error,setError] = useState<any>(null)\n    const [isLoading,setIsLoading] = useState(false)\n    const [isChanged,setIsChanged] = useState<boolean>(false)\n    const changepassword = async (oldpassword:string,newpassword:string,confirmed_newpassword:string) => {\n        setIsLoading(true)\n        setIsChanged(false)\n        setError(null)\n        try{\n          const response = await fetch(\"http://localhost:4000/changepassword\",{\n            method: \"POST\",\n            headers: {\"Content-Type\":\"application/json\"},\n            credentials: 'include',\n            body: JSON.stringify({oldpassword,newpassword,confirmed_newpassword})\n        })\n        const json = await response.json()\n        if (!response.ok){\n            setIsLoading(false)\n            setError(json.error)\n        }\n        if (response.ok){\n            setIsLoading(false)\n            alert(json.message+\"!\")\n            setIsChanged(true)\n        }   \n        }\n        catch(error){\n            console.log(error)\n        }\n    }\n    return {changepassword,isLoading,error,isChanged}\n}"],"mappings":";AAAA,SAAQA,QAAQ,QAAO,OAAO;AAE9B,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM,CAACC,KAAK,EAACC,QAAQ,CAAC,GAAGJ,QAAQ,CAAM,IAAI,CAAC;EAC5C,MAAM,CAACK,SAAS,EAACC,YAAY,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAChD,MAAM,CAACO,SAAS,EAACC,YAAY,CAAC,GAAGR,QAAQ,CAAU,KAAK,CAAC;EACzD,MAAMS,cAAc,GAAG,MAAAA,CAAOC,WAAkB,EAACC,WAAkB,EAACC,qBAA4B,KAAK;IACjGN,YAAY,CAAC,IAAI,CAAC;IAClBE,YAAY,CAAC,KAAK,CAAC;IACnBJ,QAAQ,CAAC,IAAI,CAAC;IACd,IAAG;MACD,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAC;QAClEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAC,cAAc,EAAC;QAAkB,CAAC;QAC5CC,WAAW,EAAE,SAAS;QACtBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAACV,WAAW;UAACC,WAAW;UAACC;QAAqB,CAAC;MACxE,CAAC,CAAC;MACF,MAAMS,IAAI,GAAG,MAAMR,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAC;QACbhB,YAAY,CAAC,KAAK,CAAC;QACnBF,QAAQ,CAACiB,IAAI,CAAClB,KAAK,CAAC;MACxB;MACA,IAAIU,QAAQ,CAACS,EAAE,EAAC;QACZhB,YAAY,CAAC,KAAK,CAAC;QACnBiB,KAAK,CAACF,IAAI,CAACG,OAAO,GAAC,GAAG,CAAC;QACvBhB,YAAY,CAAC,IAAI,CAAC;MACtB;IACA,CAAC,CACD,OAAML,KAAK,EAAC;MACRsB,OAAO,CAACC,GAAG,CAACvB,KAAK,CAAC;IACtB;EACJ,CAAC;EACD,OAAO;IAACM,cAAc;IAACJ,SAAS;IAACF,KAAK;IAACI;EAAS,CAAC;AACrD,CAAC;AAAAL,EAAA,CA/BYD,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}